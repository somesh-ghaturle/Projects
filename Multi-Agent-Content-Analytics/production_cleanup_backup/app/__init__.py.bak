"""
Multi-Agent Content Analytics Platform - Application Package

This package contains the complete multi-agent content analytics platform,
featuring modular architecture, professional code organization, and 
comprehensive documentation.

Author: Content Analytics Team  
Version: 3.0.0
Last Updated: August 2025
"""

from .core.config import ContentAnalyticsConfig

__version__ = "3.0.0"
__author__ = "Content Analytics Team"
__all__ = ["ContentAnalyticsConfig"]

# Import core components for easy access
from .core import (
    ContentAnalyticsConfig,
    get_platform_config,
    initialize_core_system,
    get_system_info,
    health_check
)

from .models import (
    # Main request/response models
    ContentAnalysisRequest,
    ContentAnalysisResponse,
    BulkAnalysisRequest,
    BulkAnalysisResponse,
    
    # System models
    HealthStatus,
    MetricsResponse,
    ErrorResponse,
    
    # Enums
    AgentType,
    ContentType,
    AnalysisStatus,
    PriorityLevel
)

from .agents import (
    ScriptAnalyzerAgent,
    GenreClassificationAgent,
    MarketingInsightsAgent,
    AGENT_REGISTRY,
    get_agent_by_type,
    get_agent_metadata
)

from .utils import (
    TextProcessor,
    ScreenplayParser,
    CacheManager,
    get_cache_manager,
    get_text_processor,
    process_text_content,
    parse_screenplay_content
)

# Package metadata
__version__ = "3.0.0"
__author__ = "Content Analytics Team"
__email__ = "support@contentalytics.com"
__license__ = "MIT"
__description__ = "Advanced AI-powered content analytics platform with specialized agents"

# Platform information
PLATFORM_INFO = {
    "name": "Multi-Agent Content Analytics Platform",
    "version": __version__,
    "description": __description__,
    "author": __author__,
    "license": __license__,
    "features": [
        "Advanced Script Analysis",
        "Intelligent Genre Classification", 
        "Strategic Marketing Insights",
        "Professional Caching System",
        "Comprehensive API Documentation",
        "Modular Architecture",
        "Type-Safe Models",
        "Async Processing Support"
    ],
    "agents": {
        "script_analyzer": "Advanced screenplay and content analysis",
        "genre_classifier": "Intelligent genre detection and classification",
        "marketing_insights": "Strategic marketing analysis and recommendations"
    },
    "technical_stack": [
        "FastAPI 3.0",
        "Pydantic v2",
        "Async/Await",
        "Professional Architecture",
        "Comprehensive Testing",
        "Type Hints",
        "Logging & Monitoring"
    ]
}

# Application registry for runtime introspection
APPLICATION_REGISTRY = {
    "core_modules": [
        "app.core.config",
        "app.models.data_models", 
        "app.agents.script_analyzer_agent",
        "app.agents.genre_classification_agent",
        "app.agents.marketing_insights_agent",
        "app.utils.text_processing",
        "app.utils.cache_manager"
    ],
    "api_endpoints": [
        "/health",
        "/analyze", 
        "/analyze/bulk",
        "/agents",
        "/metrics",
        "/validate"
    ],
    "agent_types": [agent_type.value for agent_type in AgentType],
    "supported_content_types": [content_type.value for content_type in ContentType]
}

def get_platform_info() -> dict:
    """
    Get comprehensive platform information.
    
    Returns:
        Dictionary with platform metadata and capabilities
    """
    return PLATFORM_INFO

def get_application_registry() -> dict:
    """
    Get application registry for runtime introspection.
    
    Returns:
        Dictionary with application components and endpoints
    """
    return APPLICATION_REGISTRY

def initialize_platform(config_overrides: dict = None) -> dict:
    """
    Initialize the complete platform with all components.
    
    Args:
        config_overrides: Optional configuration overrides
    
    Returns:
        Dictionary with initialization status
    """
    initialization_status = {
        "platform_info": PLATFORM_INFO,
        "initialization_steps": [],
        "success": True,
        "errors": []
    }
    
    try:
        # Initialize core system
        core_status = initialize_core_system(config_overrides)
        initialization_status["initialization_steps"].append({
            "step": "core_system",
            "status": core_status
        })
        
        # Initialize utilities
        from .utils import initialize_utils
        utils_status = initialize_utils()
        initialization_status["initialization_steps"].append({
            "step": "utilities", 
            "status": utils_status
        })
        
        # Validate agent registry
        agent_validation = {
            "total_agents": len(AGENT_REGISTRY),
            "available_agents": list(AGENT_REGISTRY.keys()),
            "agent_metadata": {
                agent_type: get_agent_metadata(agent_type) 
                for agent_type in AgentType
            }
        }
        initialization_status["initialization_steps"].append({
            "step": "agent_validation",
            "status": agent_validation
        })
        
        initialization_status["message"] = "Platform initialized successfully"
        
    except Exception as e:
        initialization_status["success"] = False
        initialization_status["errors"].append(str(e))
        initialization_status["message"] = f"Platform initialization failed: {e}"
    
    return initialization_status

def get_version_info() -> dict:
    """
    Get detailed version information for all components.
    
    Returns:
        Dictionary with version details
    """
    return {
        "platform_version": __version__,
        "core_components": {
            "fastapi": "0.104.1",
            "pydantic": "2.5.0", 
            "uvicorn": "0.24.0"
        },
        "agents": {
            agent_type.value: "3.0.0" for agent_type in AgentType
        },
        "utilities": {
            "text_processor": "3.0.0",
            "cache_manager": "3.0.0",
            "screenplay_parser": "3.0.0"
        },
        "python_version": ">=3.8",
        "release_date": "August 2025",
        "build_info": {
            "architecture": "modular",
            "code_style": "professional",
            "documentation": "comprehensive",
            "testing": "extensive"
        }
    }

# Convenience functions for common operations

def quick_analyze(content: str, agent_type: AgentType = AgentType.SCRIPT_ANALYZER) -> dict:
    """
    Quick content analysis using specified agent.
    
    Args:
        content: Content to analyze
        agent_type: Agent to use for analysis
    
    Returns:
        Analysis results
    """
    try:
        agent_class = get_agent_by_type(agent_type)
        if not agent_class:
            raise ValueError(f"Unknown agent type: {agent_type}")
        
        agent = agent_class()
        return agent.analyze_content(content)
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "Quick analysis failed"
        }

def validate_platform_health() -> dict:
    """
    Validate platform health and component status.
    
    Returns:
        Health validation results
    """
    try:
        health_status = health_check()
        config = get_platform_config()
        
        return {
            "overall_health": health_status["overall_status"],
            "system_checks": health_status.get("checks", {}),
            "configuration_valid": True,
            "agents_available": len(AGENT_REGISTRY),
            "platform_ready": True,
            "timestamp": health_status.get("timestamp")
        }
        
    except Exception as e:
        return {
            "overall_health": "error",
            "platform_ready": False,
            "error": str(e),
            "message": "Health validation failed"
        }

# Export main components for easy importing
__all__ = [
    # Core exports
    "ContentAnalyticsConfig", "get_platform_config", "initialize_core_system",
    "get_system_info", "health_check",
    
    # Model exports  
    "ContentAnalysisRequest", "ContentAnalysisResponse", 
    "BulkAnalysisRequest", "BulkAnalysisResponse",
    "HealthStatus", "MetricsResponse", "ErrorResponse",
    "AgentType", "ContentType", "AnalysisStatus", "PriorityLevel",
    
    # Agent exports
    "ScriptAnalyzerAgent", "GenreClassificationAgent", "MarketingInsightsAgent",
    "AGENT_REGISTRY", "get_agent_by_type", "get_agent_metadata",
    
    # Utility exports
    "TextProcessor", "ScreenplayParser", "CacheManager",
    "get_cache_manager", "get_text_processor", 
    "process_text_content", "parse_screenplay_content",
    
    # Package functions
    "get_platform_info", "get_application_registry", "initialize_platform",
    "get_version_info", "quick_analyze", "validate_platform_health",
    
    # Metadata
    "PLATFORM_INFO", "APPLICATION_REGISTRY"
]
