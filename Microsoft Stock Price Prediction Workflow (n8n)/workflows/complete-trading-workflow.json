{
  "name": "Complete MSFT Trading with AI Analysis",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "ticker",
              "value": "MSFT"
            },
            {
              "name": "startDate", 
              "value": "1722211200"
            },
            {
              "name": "endDate",
              "value": "1724889600"
            }
          ]
        }
      },
      "id": "set-data",
      "name": "Set Stock Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "url": "https://query1.finance.yahoo.com/v8/finance/chart/MSFT",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "interval",
              "value": "1d"
            },
            {
              "name": "period1",
              "value": "1722211200"
            },
            {
              "name": "period2", 
              "value": "1724889600"
            }
          ]
        }
      },
      "id": "fetch-stock",
      "name": "Fetch MSFT Stock Data", 
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\nconst result = data.chart.result[0];\nconst timestamps = result.timestamp;\nconst closes = result.indicators.quote[0].close;\n\n// Get last 10 closing prices\nconst recentPrices = closes.slice(-10);\nconst currentPrice = closes[closes.length - 1];\n\nreturn {\n  recentPrices: recentPrices,\n  currentPrice: currentPrice,\n  symbol: result.meta.symbol,\n  currency: result.meta.currency\n};"
      },
      "id": "process-data",
      "name": "Process Stock Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3:latest"
            },
            {
              "name": "prompt",
              "value": "=Based on the following Microsoft (MSFT) stock data, provide a trading analysis and prediction:\n\nRecent closing prices: {{ $json.recentPrices.join(', ') }}\nCurrent price: ${{ $json.currentPrice }}\n\nAnalyze the trend and provide:\n1. A predicted price for tomorrow\n2. Trading recommendation (BUY/SELL/HOLD)\n3. Brief reasoning\n4. Risk assessment\n\nFormat your response as JSON with these fields: predictedPrice, recommendation, reasoning, riskLevel"
            },
            {
              "name": "stream",
              "value": "false"
            }
          ]
        }
      },
      "id": "ai-analysis",
      "name": "AI Stock Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.first().json;\nconst analysis = JSON.parse(aiResponse.response);\n\nreturn {\n  symbol: 'MSFT',\n  currentPrice: $node[\"Process Stock Data\"].json.currentPrice,\n  prediction: analysis.predictedPrice,\n  recommendation: analysis.recommendation,\n  reasoning: analysis.reasoning,\n  riskLevel: analysis.riskLevel,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "format-results",
      "name": "Format Trading Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "send",
        "message": {
          "to": "someshghaturle@gmail.com",
          "subject": "=MSFT Trading Alert - {{ $json.recommendation }}",
          "body": "=üìà Microsoft Stock Trading Analysis\n\nüè∑Ô∏è Symbol: {{ $json.symbol }}\nüí∞ Current Price: ${{ $json.currentPrice }}\nüéØ Predicted Price: ${{ $json.prediction }}\nüìä Recommendation: {{ $json.recommendation }}\n‚öñÔ∏è Risk Level: {{ $json.riskLevel }}\n\nüí≠ Analysis:\n{{ $json.reasoning }}\n\nüïê Generated: {{ $json.timestamp }}\n\n---\nAutomated by AI Trading System"
        }
      },
      "id": "send-email",
      "name": "Send Trading Alert",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1440, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set Stock Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Stock Data": {
      "main": [
        [
          {
            "node": "Fetch MSFT Stock Data",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Fetch MSFT Stock Data": {
      "main": [
        [
          {
            "node": "Process Stock Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Stock Data": {
      "main": [
        [
          {
            "node": "AI Stock Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Stock Analysis": {
      "main": [
        [
          {
            "node": "Format Trading Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Trading Results": {
      "main": [
        [
          {
            "node": "Send Trading Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-08-29T00:00:00.000Z",
  "versionId": "1"
}
