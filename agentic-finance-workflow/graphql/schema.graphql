"""
GraphQL Schema for Agentic Finance Workflow
Defines all data types, queries, mutations, and subscriptions
"""

scalar DateTime
scalar JSON
scalar Upload

# Core Financial Data Types
type StockPrice {
  id: ID!
  symbol: String!
  timestamp: DateTime!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  volume: Int!
  adjustedClose: Float
  technicalIndicators: TechnicalIndicators
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TechnicalIndicators {
  sma20: Float
  sma50: Float
  ema20: Float
  ema50: Float
  rsi: Float
  macd: MACD
  bollingerBands: BollingerBands
  stochasticOscillator: StochasticOscillator
}

type MACD {
  macdLine: Float
  signalLine: Float
  histogram: Float
}

type BollingerBands {
  upperBand: Float
  middleBand: Float
  lowerBand: Float
}

type StochasticOscillator {
  percentK: Float
  percentD: Float
}

# Portfolio and Risk Management
type Portfolio {
  id: ID!
  name: String!
  description: String
  holdings: [Holding!]!
  totalValue: Float!
  riskMetrics: RiskMetrics
  performance: PerformanceMetrics
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Holding {
  id: ID!
  symbol: String!
  quantity: Float!
  averageCost: Float!
  currentPrice: Float!
  marketValue: Float!
  unrealizedGainLoss: Float!
  weight: Float!
}

type RiskMetrics {
  var95: Float        # Value at Risk (95%)
  cvar95: Float       # Conditional Value at Risk (95%)
  sharpeRatio: Float
  maxDrawdown: Float
  beta: Float
  alpha: Float
  volatility: Float
  correlationMatrix: JSON
}

type PerformanceMetrics {
  totalReturn: Float!
  annualizedReturn: Float!
  volatility: Float!
  sharpeRatio: Float!
  maxDrawdown: Float!
  calmarRatio: Float!
  sortinoRatio: Float!
  benchmarkComparison: BenchmarkComparison
}

type BenchmarkComparison {
  benchmarkSymbol: String!
  relativeReturn: Float!
  trackingError: Float!
  informationRatio: Float!
}

# Agent Workflow Types
type WorkflowExecution {
  id: ID!
  name: String!
  status: WorkflowStatus!
  startedAt: DateTime!
  completedAt: DateTime
  duration: Int          # in seconds
  agents: [AgentExecution!]!
  results: JSON
  errorMessage: String
}

type AgentExecution {
  id: ID!
  agentType: AgentType!
  status: AgentStatus!
  startedAt: DateTime!
  completedAt: DateTime
  duration: Int
  inputData: JSON
  outputData: JSON
  metrics: AgentMetrics
  errorMessage: String
}

type AgentMetrics {
  recordsProcessed: Int
  errorCount: Int
  successRate: Float
  processingSpeed: Float  # records per second
  memoryUsage: Float      # MB
  cpuUsage: Float         # percentage
}

# Recommendations and Insights
type Recommendation {
  id: ID!
  type: RecommendationType!
  action: RecommendationAction!
  symbol: String
  portfolio: String
  confidence: Float!       # 0.0 to 1.0
  reasoning: String!
  expectedReturn: Float
  riskLevel: RiskLevel!
  timeHorizon: TimeHorizon!
  priority: Priority!
  createdAt: DateTime!
  expiresAt: DateTime
  metadata: JSON
}

type MarketInsight {
  id: ID!
  title: String!
  description: String!
  category: InsightCategory!
  impact: ImpactLevel!
  affectedSymbols: [String!]!
  confidence: Float!
  source: String!
  createdAt: DateTime!
  metadata: JSON
}

# Data Quality and Validation
type DataQualityReport {
  id: ID!
  datasetName: String!
  recordCount: Int!
  missingValueCount: Int!
  duplicateCount: Int!
  outlierCount: Int!
  qualityScore: Float!    # 0.0 to 1.0
  issues: [DataQualityIssue!]!
  recommendations: [String!]!
  generatedAt: DateTime!
}

type DataQualityIssue {
  field: String!
  issueType: IssueType!
  severity: Severity!
  count: Int!
  description: String!
  suggestedFix: String
}

# Enums
enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AgentType {
  CLEANER
  VALIDATOR
  ANALYZER
  VISUALIZER
  RECOMMENDER
  ORCHESTRATOR
}

enum AgentStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  RETRYING
}

enum RecommendationType {
  BUY
  SELL
  HOLD
  REBALANCE
  HEDGE
  DIVERSIFY
}

enum RecommendationAction {
  MARKET_ORDER
  LIMIT_ORDER
  STOP_LOSS
  TAKE_PROFIT
  PORTFOLIO_REBALANCE
  RISK_ADJUSTMENT
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum TimeHorizon {
  INTRADAY
  SHORT_TERM    # 1-30 days
  MEDIUM_TERM   # 1-12 months
  LONG_TERM     # 1+ years
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InsightCategory {
  MARKET_TREND
  SECTOR_ROTATION
  VOLATILITY_ALERT
  EARNINGS_IMPACT
  TECHNICAL_SIGNAL
  FUNDAMENTAL_CHANGE
}

enum ImpactLevel {
  MINIMAL
  LOW
  MODERATE
  HIGH
  SEVERE
}

enum IssueType {
  MISSING_VALUES
  DUPLICATES
  OUTLIERS
  FORMAT_ERROR
  RANGE_VIOLATION
  BUSINESS_RULE_VIOLATION
}

enum Severity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum TimeFrame {
  MINUTE_1
  MINUTE_5
  MINUTE_15
  MINUTE_30
  HOUR_1
  HOUR_4
  DAY_1
  WEEK_1
  MONTH_1
}

# Input Types
input StockPriceFilter {
  symbols: [String!]
  startDate: DateTime
  endDate: DateTime
  timeFrame: TimeFrame
  minVolume: Int
  priceRange: PriceRangeInput
}

input PriceRangeInput {
  min: Float
  max: Float
}

input PortfolioInput {
  name: String!
  description: String
  holdings: [HoldingInput!]!
}

input HoldingInput {
  symbol: String!
  quantity: Float!
  averageCost: Float!
}

input WorkflowInput {
  name: String!
  agentChain: [AgentConfigInput!]!
  parameters: JSON
}

input AgentConfigInput {
  agentType: AgentType!
  parameters: JSON!
}

input RecommendationFilter {
  types: [RecommendationType!]
  riskLevels: [RiskLevel!]
  timeHorizons: [TimeHorizon!]
  minConfidence: Float
  symbols: [String!]
  portfolios: [String!]
}

# Root Types
type Query {
  # Stock Data Queries
  stockPrices(filter: StockPriceFilter!): [StockPrice!]!
  stockPrice(symbol: String!, timestamp: DateTime!): StockPrice
  latestStockPrice(symbol: String!): StockPrice
  stockHistory(symbol: String!, days: Int!): [StockPrice!]!
  
  # Portfolio Queries
  portfolios: [Portfolio!]!
  portfolio(id: ID!): Portfolio
  portfolioPerformance(id: ID!, startDate: DateTime, endDate: DateTime): PerformanceMetrics
  
  # Workflow Queries
  workflows: [WorkflowExecution!]!
  workflow(id: ID!): WorkflowExecution
  workflowsByStatus(status: WorkflowStatus!): [WorkflowExecution!]!
  
  # Recommendation Queries
  recommendations(filter: RecommendationFilter): [Recommendation!]!
  recommendation(id: ID!): Recommendation
  marketInsights(category: InsightCategory, limit: Int): [MarketInsight!]!
  
  # Data Quality Queries
  dataQualityReport(datasetName: String!): DataQualityReport
  dataQualityHistory(datasetName: String!, days: Int!): [DataQualityReport!]!
  
  # System Health
  systemHealth: SystemHealth!
  agentStatus: [AgentStatus!]!
}

type Mutation {
  # Data Ingestion
  uploadDataset(file: Upload!, datasetName: String!): DatasetUploadResult!
  deleteDataset(datasetName: String!): Boolean!
  
  # Portfolio Management
  createPortfolio(input: PortfolioInput!): Portfolio!
  updatePortfolio(id: ID!, input: PortfolioInput!): Portfolio!
  deletePortfolio(id: ID!): Boolean!
  
  # Workflow Management
  startWorkflow(input: WorkflowInput!): WorkflowExecution!
  stopWorkflow(id: ID!): Boolean!
  retryWorkflow(id: ID!): WorkflowExecution!
  
  # Recommendation Management
  dismissRecommendation(id: ID!): Boolean!
  executeRecommendation(id: ID!): RecommendationResult!
  
  # Data Management
  cleanData(datasetName: String!, rules: JSON): DataCleaningResult!
  validateData(datasetName: String!, schema: JSON): DataValidationResult!
}

type Subscription {
  # Real-time Price Updates
  stockPriceUpdates(symbols: [String!]!): StockPrice!
  
  # Workflow Progress
  workflowProgress(id: ID!): WorkflowExecution!
  agentProgress(workflowId: ID!, agentType: AgentType!): AgentExecution!
  
  # Recommendations
  newRecommendations(portfolios: [String!]): Recommendation!
  marketInsightUpdates: MarketInsight!
  
  # System Monitoring
  systemMetrics: SystemMetrics!
  dataQualityAlerts: DataQualityAlert!
}

# Additional Types for Mutations and Subscriptions
type SystemHealth {
  status: String!
  uptime: Int!
  version: String!
  environment: String!
  services: [ServiceHealth!]!
}

type ServiceHealth {
  name: String!
  status: String!
  responseTime: Float!
  lastCheck: DateTime!
}

type DatasetUploadResult {
  success: Boolean!
  datasetName: String!
  recordCount: Int!
  errors: [String!]!
}

type RecommendationResult {
  success: Boolean!
  executedAt: DateTime!
  result: JSON
  errors: [String!]!
}

type DataCleaningResult {
  success: Boolean!
  originalRecords: Int!
  cleanedRecords: Int!
  removedRecords: Int!
  issues: [String!]!
}

type DataValidationResult {
  success: Boolean!
  validRecords: Int!
  invalidRecords: Int!
  errors: [DataQualityIssue!]!
}

type SystemMetrics {
  timestamp: DateTime!
  cpuUsage: Float!
  memoryUsage: Float!
  diskUsage: Float!
  networkIO: NetworkIO!
  activeConnections: Int!
}

type NetworkIO {
  bytesIn: Int!
  bytesOut: Int!
  packetsIn: Int!
  packetsOut: Int!
}

type DataQualityAlert {
  id: ID!
  datasetName: String!
  alertType: String!
  severity: Severity!
  message: String!
  timestamp: DateTime!
  metadata: JSON
}
